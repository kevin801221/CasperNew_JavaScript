{"ast":null,"code":"/**\n * API 服務工具\n * 用於處理與 remove.bg API 的通信\n */\n\n// remove.bg API 基礎 URL\nconst API_BASE_URL = 'https://api.remove.bg/v1.0';\n\n// API Key - 直接使用硬編碼的方式，確保在開發環境中可以正常使用\nconst API_KEY = 'Khr1wiotNPuDyqQZxpzNKTsZ';\n\n/**\n * 發送去背請求到 remove.bg API\n * @param {File|Blob|string} image - 圖片文件、Blob 或 URL\n * @returns {Promise<string>} 去背後的圖片 Base64 字符串\n */\nexport const removeBackgroundAPI = async image => {\n  try {\n    console.log('開始處理去背請求，圖片類型:', typeof image);\n\n    // 創建 FormData 對象\n    const formData = new FormData();\n\n    // 設置圖片大小參數\n    formData.append('size', 'auto');\n\n    // 根據圖片類型選擇不同的處理方式\n    if (typeof image === 'string') {\n      // 如果是本地檔案路徑，先轉換為完整 URL\n      if (image.startsWith('/') && !image.startsWith('//')) {\n        const origin = window.location.origin;\n        image = `${origin}${image}`;\n      }\n      if (image.startsWith('data:')) {\n        // 如果是 base64 圖片\n        console.log('處理 base64 圖片');\n        formData.append('image_file_b64', image.split(',')[1]);\n      } else if (image.startsWith('http') || image.startsWith('//')) {\n        // 如果是 URL\n        console.log('處理 URL 圖片:', image);\n        formData.append('image_url', image);\n      } else {\n        console.error('不支持的圖片格式:', image);\n        throw new Error('不支持的圖片格式');\n      }\n    } else if (image instanceof Blob || image instanceof File) {\n      // 如果是 Blob 或 File 對象\n      console.log('處理 Blob/File 圖片');\n      formData.append('image_file', image);\n    } else {\n      console.error('不支持的圖片類型:', image);\n      throw new Error('不支持的圖片類型');\n    }\n    console.log('發送請求到 remove.bg API');\n\n    // 發送請求到 remove.bg API\n    const response = await fetch(`${API_BASE_URL}/removebg`, {\n      method: 'POST',\n      headers: {\n        'X-Api-Key': API_KEY\n      },\n      body: formData\n    });\n    if (!response.ok) {\n      const errorText = await response.text();\n      console.error(`API 請求失敗: ${response.status} ${response.statusText}`, errorText);\n      throw new Error(`API 請求失敗: ${response.status} ${response.statusText}`);\n    }\n    console.log('API 請求成功，正在處理響應');\n\n    // 獲取二進制數據\n    const arrayBuffer = await response.arrayBuffer();\n\n    // 轉換為 base64\n    const base64 = arrayBufferToBase64(arrayBuffer);\n    console.log('去背處理完成，返回 base64 圖片');\n    return `data:image/png;base64,${base64}`;\n  } catch (error) {\n    console.error('去背 API 調用失敗:', error);\n    throw error;\n  }\n};\n\n/**\n * 將 ArrayBuffer 轉換為 base64 字符串\n * @param {ArrayBuffer} buffer - 要轉換的 ArrayBuffer\n * @returns {string} base64 字符串（不包含 data URL 前綴）\n */\nconst arrayBufferToBase64 = buffer => {\n  try {\n    let binary = '';\n    const bytes = new Uint8Array(buffer);\n    const len = bytes.byteLength;\n    for (let i = 0; i < len; i++) {\n      binary += String.fromCharCode(bytes[i]);\n    }\n    return window.btoa(binary);\n  } catch (error) {\n    console.error('轉換 ArrayBuffer 到 base64 失敗:', error);\n    throw error;\n  }\n};\n\n/**\n * 發送批量去背請求到 API\n * @param {Array<File|Blob|string>} images - 圖片文件、Blob 或 URL 的數組\n * @returns {Promise<Array<string>>} 去背後的圖片 Base64 數組\n */\nexport const batchRemoveBackgroundAPI = async images => {\n  try {\n    // remove.bg 不直接支持批量處理，所以我們並行處理多個請求\n    // 為了避免同時發送太多請求，我們使用 Promise.all 但限制並行數\n    const batchSize = 3; // 每批處理的圖片數量\n    const results = [];\n\n    // 分批處理\n    for (let i = 0; i < images.length; i += batchSize) {\n      const batch = images.slice(i, i + batchSize);\n      const batchPromises = batch.map(image => removeBackgroundAPI(image));\n\n      // 等待當前批次完成\n      const batchResults = await Promise.all(batchPromises);\n      results.push(...batchResults);\n\n      // 如果還有更多圖片要處理，添加延遲以避免 API 限制\n      if (i + batchSize < images.length) {\n        await new Promise(resolve => setTimeout(resolve, 1000));\n      }\n    }\n\n    // 返回處理後的圖片 URL 數組\n    return results;\n  } catch (error) {\n    console.error('批量去背 API 調用失敗:', error);\n    throw error;\n  }\n};\n\n/**\n * 發送背景替換請求到 API\n * @param {File|Blob|string} image - 圖片文件、Blob 或 URL\n * @param {File|Blob|string} background - 背景圖片文件、Blob 或 URL\n * @returns {Promise<string>} 處理後的圖片 URL\n */\nexport const replaceBackgroundAPI = async (image, background) => {\n  try {\n    // 首先去除背景\n    const transparentImage = await removeBackgroundAPI(image);\n\n    // 將透明背景的圖片轉換為 Blob\n    const response = await fetch(transparentImage);\n    const imageBlob = await response.blob();\n\n    // 使用 Canvas 合成新圖片\n    const compositeImage = await compositeImages(imageBlob, background);\n    return compositeImage;\n  } catch (error) {\n    console.error('背景替換 API 調用失敗:', error);\n    throw error;\n  }\n};\n\n/**\n * 使用 Canvas 將兩張圖片合成\n * @param {Blob} foreground - 前景圖片（已去背）\n * @param {string} background - 背景圖片 URL\n * @returns {Promise<string>} 合成後的圖片 base64 字符串\n */\nconst compositeImages = async (foreground, background) => {\n  return new Promise(async (resolve, reject) => {\n    try {\n      // 創建兩個 Image 對象\n      const fgImage = new Image();\n      const bgImage = new Image();\n\n      // 加載前景圖片\n      fgImage.onload = () => {\n        // 前景加載完成後，加載背景\n        if (typeof background === 'string' && (background.startsWith('http') || background.startsWith('data:'))) {\n          bgImage.src = background;\n        } else {\n          // 如果是 File 或 Blob，轉換為 URL\n          bgImage.src = URL.createObjectURL(background);\n        }\n      };\n\n      // 背景加載完成後，進行合成\n      bgImage.onload = () => {\n        // 創建 Canvas 元素\n        const canvas = document.createElement('canvas');\n        const ctx = canvas.getContext('2d');\n\n        // 設置 Canvas 尺寸為前景圖片的尺寸\n        canvas.width = fgImage.width;\n        canvas.height = fgImage.height;\n\n        // 繪製背景（調整大小以適應 Canvas）\n        ctx.drawImage(bgImage, 0, 0, canvas.width, canvas.height);\n\n        // 繪製前景\n        ctx.drawImage(fgImage, 0, 0, canvas.width, canvas.height);\n\n        // 轉換為 base64\n        const result = canvas.toDataURL('image/png');\n\n        // 如果背景是 Blob URL，釋放它\n        if (typeof background !== 'string' || !background.startsWith('http') && !background.startsWith('data:')) {\n          URL.revokeObjectURL(bgImage.src);\n        }\n        resolve(result);\n      };\n\n      // 設置錯誤處理\n      fgImage.onerror = reject;\n      bgImage.onerror = reject;\n\n      // 開始加載前景\n      if (foreground instanceof Blob) {\n        fgImage.src = URL.createObjectURL(foreground);\n      } else {\n        fgImage.src = foreground;\n      }\n    } catch (error) {\n      reject(error);\n    }\n  });\n};","map":{"version":3,"names":["API_BASE_URL","API_KEY","removeBackgroundAPI","image","console","log","formData","FormData","append","startsWith","origin","window","location","split","error","Error","Blob","File","response","fetch","method","headers","body","ok","errorText","text","status","statusText","arrayBuffer","base64","arrayBufferToBase64","buffer","binary","bytes","Uint8Array","len","byteLength","i","String","fromCharCode","btoa","batchRemoveBackgroundAPI","images","batchSize","results","length","batch","slice","batchPromises","map","batchResults","Promise","all","push","resolve","setTimeout","replaceBackgroundAPI","background","transparentImage","imageBlob","blob","compositeImage","compositeImages","foreground","reject","fgImage","Image","bgImage","onload","src","URL","createObjectURL","canvas","document","createElement","ctx","getContext","width","height","drawImage","result","toDataURL","revokeObjectURL","onerror"],"sources":["/Users/kevinluo/application/Casper_final_version/react-frontend/src/utils/apiService.js"],"sourcesContent":["/**\n * API 服務工具\n * 用於處理與 remove.bg API 的通信\n */\n\n// remove.bg API 基礎 URL\nconst API_BASE_URL = 'https://api.remove.bg/v1.0';\n\n// API Key - 直接使用硬編碼的方式，確保在開發環境中可以正常使用\nconst API_KEY = 'Khr1wiotNPuDyqQZxpzNKTsZ';\n\n/**\n * 發送去背請求到 remove.bg API\n * @param {File|Blob|string} image - 圖片文件、Blob 或 URL\n * @returns {Promise<string>} 去背後的圖片 Base64 字符串\n */\nexport const removeBackgroundAPI = async (image) => {\n  try {\n    console.log('開始處理去背請求，圖片類型:', typeof image);\n    \n    // 創建 FormData 對象\n    const formData = new FormData();\n    \n    // 設置圖片大小參數\n    formData.append('size', 'auto');\n    \n    // 根據圖片類型選擇不同的處理方式\n    if (typeof image === 'string') {\n      // 如果是本地檔案路徑，先轉換為完整 URL\n      if (image.startsWith('/') && !image.startsWith('//')) {\n        const origin = window.location.origin;\n        image = `${origin}${image}`;\n      }\n      \n      if (image.startsWith('data:')) {\n        // 如果是 base64 圖片\n        console.log('處理 base64 圖片');\n        formData.append('image_file_b64', image.split(',')[1]);\n      } else if (image.startsWith('http') || image.startsWith('//')) {\n        // 如果是 URL\n        console.log('處理 URL 圖片:', image);\n        formData.append('image_url', image);\n      } else {\n        console.error('不支持的圖片格式:', image);\n        throw new Error('不支持的圖片格式');\n      }\n    } else if (image instanceof Blob || image instanceof File) {\n      // 如果是 Blob 或 File 對象\n      console.log('處理 Blob/File 圖片');\n      formData.append('image_file', image);\n    } else {\n      console.error('不支持的圖片類型:', image);\n      throw new Error('不支持的圖片類型');\n    }\n    \n    console.log('發送請求到 remove.bg API');\n    \n    // 發送請求到 remove.bg API\n    const response = await fetch(`${API_BASE_URL}/removebg`, {\n      method: 'POST',\n      headers: {\n        'X-Api-Key': API_KEY\n      },\n      body: formData\n    });\n    \n    if (!response.ok) {\n      const errorText = await response.text();\n      console.error(`API 請求失敗: ${response.status} ${response.statusText}`, errorText);\n      throw new Error(`API 請求失敗: ${response.status} ${response.statusText}`);\n    }\n    \n    console.log('API 請求成功，正在處理響應');\n    \n    // 獲取二進制數據\n    const arrayBuffer = await response.arrayBuffer();\n    \n    // 轉換為 base64\n    const base64 = arrayBufferToBase64(arrayBuffer);\n    \n    console.log('去背處理完成，返回 base64 圖片');\n    \n    return `data:image/png;base64,${base64}`;\n  } catch (error) {\n    console.error('去背 API 調用失敗:', error);\n    throw error;\n  }\n};\n\n/**\n * 將 ArrayBuffer 轉換為 base64 字符串\n * @param {ArrayBuffer} buffer - 要轉換的 ArrayBuffer\n * @returns {string} base64 字符串（不包含 data URL 前綴）\n */\nconst arrayBufferToBase64 = (buffer) => {\n  try {\n    let binary = '';\n    const bytes = new Uint8Array(buffer);\n    const len = bytes.byteLength;\n    \n    for (let i = 0; i < len; i++) {\n      binary += String.fromCharCode(bytes[i]);\n    }\n    \n    return window.btoa(binary);\n  } catch (error) {\n    console.error('轉換 ArrayBuffer 到 base64 失敗:', error);\n    throw error;\n  }\n};\n\n\n\n/**\n * 發送批量去背請求到 API\n * @param {Array<File|Blob|string>} images - 圖片文件、Blob 或 URL 的數組\n * @returns {Promise<Array<string>>} 去背後的圖片 Base64 數組\n */\nexport const batchRemoveBackgroundAPI = async (images) => {\n  try {\n    // remove.bg 不直接支持批量處理，所以我們並行處理多個請求\n    // 為了避免同時發送太多請求，我們使用 Promise.all 但限制並行數\n    const batchSize = 3; // 每批處理的圖片數量\n    const results = [];\n    \n    // 分批處理\n    for (let i = 0; i < images.length; i += batchSize) {\n      const batch = images.slice(i, i + batchSize);\n      const batchPromises = batch.map(image => removeBackgroundAPI(image));\n      \n      // 等待當前批次完成\n      const batchResults = await Promise.all(batchPromises);\n      results.push(...batchResults);\n      \n      // 如果還有更多圖片要處理，添加延遲以避免 API 限制\n      if (i + batchSize < images.length) {\n        await new Promise(resolve => setTimeout(resolve, 1000));\n      }\n    }\n    \n    // 返回處理後的圖片 URL 數組\n    return results;\n  } catch (error) {\n    console.error('批量去背 API 調用失敗:', error);\n    throw error;\n  }\n};\n\n/**\n * 發送背景替換請求到 API\n * @param {File|Blob|string} image - 圖片文件、Blob 或 URL\n * @param {File|Blob|string} background - 背景圖片文件、Blob 或 URL\n * @returns {Promise<string>} 處理後的圖片 URL\n */\nexport const replaceBackgroundAPI = async (image, background) => {\n  try {\n    // 首先去除背景\n    const transparentImage = await removeBackgroundAPI(image);\n    \n    // 將透明背景的圖片轉換為 Blob\n    const response = await fetch(transparentImage);\n    const imageBlob = await response.blob();\n    \n    // 使用 Canvas 合成新圖片\n    const compositeImage = await compositeImages(imageBlob, background);\n    \n    return compositeImage;\n  } catch (error) {\n    console.error('背景替換 API 調用失敗:', error);\n    throw error;\n  }\n};\n\n/**\n * 使用 Canvas 將兩張圖片合成\n * @param {Blob} foreground - 前景圖片（已去背）\n * @param {string} background - 背景圖片 URL\n * @returns {Promise<string>} 合成後的圖片 base64 字符串\n */\nconst compositeImages = async (foreground, background) => {\n  return new Promise(async (resolve, reject) => {\n    try {\n      // 創建兩個 Image 對象\n      const fgImage = new Image();\n      const bgImage = new Image();\n      \n      // 加載前景圖片\n      fgImage.onload = () => {\n        // 前景加載完成後，加載背景\n        if (typeof background === 'string' && (background.startsWith('http') || background.startsWith('data:'))) {\n          bgImage.src = background;\n        } else {\n          // 如果是 File 或 Blob，轉換為 URL\n          bgImage.src = URL.createObjectURL(background);\n        }\n      };\n      \n      // 背景加載完成後，進行合成\n      bgImage.onload = () => {\n        // 創建 Canvas 元素\n        const canvas = document.createElement('canvas');\n        const ctx = canvas.getContext('2d');\n        \n        // 設置 Canvas 尺寸為前景圖片的尺寸\n        canvas.width = fgImage.width;\n        canvas.height = fgImage.height;\n        \n        // 繪製背景（調整大小以適應 Canvas）\n        ctx.drawImage(bgImage, 0, 0, canvas.width, canvas.height);\n        \n        // 繪製前景\n        ctx.drawImage(fgImage, 0, 0, canvas.width, canvas.height);\n        \n        // 轉換為 base64\n        const result = canvas.toDataURL('image/png');\n        \n        // 如果背景是 Blob URL，釋放它\n        if (typeof background !== 'string' || (!background.startsWith('http') && !background.startsWith('data:'))) {\n          URL.revokeObjectURL(bgImage.src);\n        }\n        \n        resolve(result);\n      };\n      \n      // 設置錯誤處理\n      fgImage.onerror = reject;\n      bgImage.onerror = reject;\n      \n      // 開始加載前景\n      if (foreground instanceof Blob) {\n        fgImage.src = URL.createObjectURL(foreground);\n      } else {\n        fgImage.src = foreground;\n      }\n    } catch (error) {\n      reject(error);\n    }\n  });\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA;AACA,MAAMA,YAAY,GAAG,4BAA4B;;AAEjD;AACA,MAAMC,OAAO,GAAG,0BAA0B;;AAE1C;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,mBAAmB,GAAG,MAAOC,KAAK,IAAK;EAClD,IAAI;IACFC,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAE,OAAOF,KAAK,CAAC;;IAE3C;IACA,MAAMG,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;;IAE/B;IACAD,QAAQ,CAACE,MAAM,CAAC,MAAM,EAAE,MAAM,CAAC;;IAE/B;IACA,IAAI,OAAOL,KAAK,KAAK,QAAQ,EAAE;MAC7B;MACA,IAAIA,KAAK,CAACM,UAAU,CAAC,GAAG,CAAC,IAAI,CAACN,KAAK,CAACM,UAAU,CAAC,IAAI,CAAC,EAAE;QACpD,MAAMC,MAAM,GAAGC,MAAM,CAACC,QAAQ,CAACF,MAAM;QACrCP,KAAK,GAAG,GAAGO,MAAM,GAAGP,KAAK,EAAE;MAC7B;MAEA,IAAIA,KAAK,CAACM,UAAU,CAAC,OAAO,CAAC,EAAE;QAC7B;QACAL,OAAO,CAACC,GAAG,CAAC,cAAc,CAAC;QAC3BC,QAAQ,CAACE,MAAM,CAAC,gBAAgB,EAAEL,KAAK,CAACU,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;MACxD,CAAC,MAAM,IAAIV,KAAK,CAACM,UAAU,CAAC,MAAM,CAAC,IAAIN,KAAK,CAACM,UAAU,CAAC,IAAI,CAAC,EAAE;QAC7D;QACAL,OAAO,CAACC,GAAG,CAAC,YAAY,EAAEF,KAAK,CAAC;QAChCG,QAAQ,CAACE,MAAM,CAAC,WAAW,EAAEL,KAAK,CAAC;MACrC,CAAC,MAAM;QACLC,OAAO,CAACU,KAAK,CAAC,WAAW,EAAEX,KAAK,CAAC;QACjC,MAAM,IAAIY,KAAK,CAAC,UAAU,CAAC;MAC7B;IACF,CAAC,MAAM,IAAIZ,KAAK,YAAYa,IAAI,IAAIb,KAAK,YAAYc,IAAI,EAAE;MACzD;MACAb,OAAO,CAACC,GAAG,CAAC,iBAAiB,CAAC;MAC9BC,QAAQ,CAACE,MAAM,CAAC,YAAY,EAAEL,KAAK,CAAC;IACtC,CAAC,MAAM;MACLC,OAAO,CAACU,KAAK,CAAC,WAAW,EAAEX,KAAK,CAAC;MACjC,MAAM,IAAIY,KAAK,CAAC,UAAU,CAAC;IAC7B;IAEAX,OAAO,CAACC,GAAG,CAAC,qBAAqB,CAAC;;IAElC;IACA,MAAMa,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGnB,YAAY,WAAW,EAAE;MACvDoB,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,WAAW,EAAEpB;MACf,CAAC;MACDqB,IAAI,EAAEhB;IACR,CAAC,CAAC;IAEF,IAAI,CAACY,QAAQ,CAACK,EAAE,EAAE;MAChB,MAAMC,SAAS,GAAG,MAAMN,QAAQ,CAACO,IAAI,CAAC,CAAC;MACvCrB,OAAO,CAACU,KAAK,CAAC,aAAaI,QAAQ,CAACQ,MAAM,IAAIR,QAAQ,CAACS,UAAU,EAAE,EAAEH,SAAS,CAAC;MAC/E,MAAM,IAAIT,KAAK,CAAC,aAAaG,QAAQ,CAACQ,MAAM,IAAIR,QAAQ,CAACS,UAAU,EAAE,CAAC;IACxE;IAEAvB,OAAO,CAACC,GAAG,CAAC,iBAAiB,CAAC;;IAE9B;IACA,MAAMuB,WAAW,GAAG,MAAMV,QAAQ,CAACU,WAAW,CAAC,CAAC;;IAEhD;IACA,MAAMC,MAAM,GAAGC,mBAAmB,CAACF,WAAW,CAAC;IAE/CxB,OAAO,CAACC,GAAG,CAAC,qBAAqB,CAAC;IAElC,OAAO,yBAAyBwB,MAAM,EAAE;EAC1C,CAAC,CAAC,OAAOf,KAAK,EAAE;IACdV,OAAO,CAACU,KAAK,CAAC,cAAc,EAAEA,KAAK,CAAC;IACpC,MAAMA,KAAK;EACb;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,MAAMgB,mBAAmB,GAAIC,MAAM,IAAK;EACtC,IAAI;IACF,IAAIC,MAAM,GAAG,EAAE;IACf,MAAMC,KAAK,GAAG,IAAIC,UAAU,CAACH,MAAM,CAAC;IACpC,MAAMI,GAAG,GAAGF,KAAK,CAACG,UAAU;IAE5B,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,GAAG,EAAEE,CAAC,EAAE,EAAE;MAC5BL,MAAM,IAAIM,MAAM,CAACC,YAAY,CAACN,KAAK,CAACI,CAAC,CAAC,CAAC;IACzC;IAEA,OAAO1B,MAAM,CAAC6B,IAAI,CAACR,MAAM,CAAC;EAC5B,CAAC,CAAC,OAAOlB,KAAK,EAAE;IACdV,OAAO,CAACU,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;IACnD,MAAMA,KAAK;EACb;AACF,CAAC;;AAID;AACA;AACA;AACA;AACA;AACA,OAAO,MAAM2B,wBAAwB,GAAG,MAAOC,MAAM,IAAK;EACxD,IAAI;IACF;IACA;IACA,MAAMC,SAAS,GAAG,CAAC,CAAC,CAAC;IACrB,MAAMC,OAAO,GAAG,EAAE;;IAElB;IACA,KAAK,IAAIP,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGK,MAAM,CAACG,MAAM,EAAER,CAAC,IAAIM,SAAS,EAAE;MACjD,MAAMG,KAAK,GAAGJ,MAAM,CAACK,KAAK,CAACV,CAAC,EAAEA,CAAC,GAAGM,SAAS,CAAC;MAC5C,MAAMK,aAAa,GAAGF,KAAK,CAACG,GAAG,CAAC9C,KAAK,IAAID,mBAAmB,CAACC,KAAK,CAAC,CAAC;;MAEpE;MACA,MAAM+C,YAAY,GAAG,MAAMC,OAAO,CAACC,GAAG,CAACJ,aAAa,CAAC;MACrDJ,OAAO,CAACS,IAAI,CAAC,GAAGH,YAAY,CAAC;;MAE7B;MACA,IAAIb,CAAC,GAAGM,SAAS,GAAGD,MAAM,CAACG,MAAM,EAAE;QACjC,MAAM,IAAIM,OAAO,CAACG,OAAO,IAAIC,UAAU,CAACD,OAAO,EAAE,IAAI,CAAC,CAAC;MACzD;IACF;;IAEA;IACA,OAAOV,OAAO;EAChB,CAAC,CAAC,OAAO9B,KAAK,EAAE;IACdV,OAAO,CAACU,KAAK,CAAC,gBAAgB,EAAEA,KAAK,CAAC;IACtC,MAAMA,KAAK;EACb;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAM0C,oBAAoB,GAAG,MAAAA,CAAOrD,KAAK,EAAEsD,UAAU,KAAK;EAC/D,IAAI;IACF;IACA,MAAMC,gBAAgB,GAAG,MAAMxD,mBAAmB,CAACC,KAAK,CAAC;;IAEzD;IACA,MAAMe,QAAQ,GAAG,MAAMC,KAAK,CAACuC,gBAAgB,CAAC;IAC9C,MAAMC,SAAS,GAAG,MAAMzC,QAAQ,CAAC0C,IAAI,CAAC,CAAC;;IAEvC;IACA,MAAMC,cAAc,GAAG,MAAMC,eAAe,CAACH,SAAS,EAAEF,UAAU,CAAC;IAEnE,OAAOI,cAAc;EACvB,CAAC,CAAC,OAAO/C,KAAK,EAAE;IACdV,OAAO,CAACU,KAAK,CAAC,gBAAgB,EAAEA,KAAK,CAAC;IACtC,MAAMA,KAAK;EACb;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,MAAMgD,eAAe,GAAG,MAAAA,CAAOC,UAAU,EAAEN,UAAU,KAAK;EACxD,OAAO,IAAIN,OAAO,CAAC,OAAOG,OAAO,EAAEU,MAAM,KAAK;IAC5C,IAAI;MACF;MACA,MAAMC,OAAO,GAAG,IAAIC,KAAK,CAAC,CAAC;MAC3B,MAAMC,OAAO,GAAG,IAAID,KAAK,CAAC,CAAC;;MAE3B;MACAD,OAAO,CAACG,MAAM,GAAG,MAAM;QACrB;QACA,IAAI,OAAOX,UAAU,KAAK,QAAQ,KAAKA,UAAU,CAAChD,UAAU,CAAC,MAAM,CAAC,IAAIgD,UAAU,CAAChD,UAAU,CAAC,OAAO,CAAC,CAAC,EAAE;UACvG0D,OAAO,CAACE,GAAG,GAAGZ,UAAU;QAC1B,CAAC,MAAM;UACL;UACAU,OAAO,CAACE,GAAG,GAAGC,GAAG,CAACC,eAAe,CAACd,UAAU,CAAC;QAC/C;MACF,CAAC;;MAED;MACAU,OAAO,CAACC,MAAM,GAAG,MAAM;QACrB;QACA,MAAMI,MAAM,GAAGC,QAAQ,CAACC,aAAa,CAAC,QAAQ,CAAC;QAC/C,MAAMC,GAAG,GAAGH,MAAM,CAACI,UAAU,CAAC,IAAI,CAAC;;QAEnC;QACAJ,MAAM,CAACK,KAAK,GAAGZ,OAAO,CAACY,KAAK;QAC5BL,MAAM,CAACM,MAAM,GAAGb,OAAO,CAACa,MAAM;;QAE9B;QACAH,GAAG,CAACI,SAAS,CAACZ,OAAO,EAAE,CAAC,EAAE,CAAC,EAAEK,MAAM,CAACK,KAAK,EAAEL,MAAM,CAACM,MAAM,CAAC;;QAEzD;QACAH,GAAG,CAACI,SAAS,CAACd,OAAO,EAAE,CAAC,EAAE,CAAC,EAAEO,MAAM,CAACK,KAAK,EAAEL,MAAM,CAACM,MAAM,CAAC;;QAEzD;QACA,MAAME,MAAM,GAAGR,MAAM,CAACS,SAAS,CAAC,WAAW,CAAC;;QAE5C;QACA,IAAI,OAAOxB,UAAU,KAAK,QAAQ,IAAK,CAACA,UAAU,CAAChD,UAAU,CAAC,MAAM,CAAC,IAAI,CAACgD,UAAU,CAAChD,UAAU,CAAC,OAAO,CAAE,EAAE;UACzG6D,GAAG,CAACY,eAAe,CAACf,OAAO,CAACE,GAAG,CAAC;QAClC;QAEAf,OAAO,CAAC0B,MAAM,CAAC;MACjB,CAAC;;MAED;MACAf,OAAO,CAACkB,OAAO,GAAGnB,MAAM;MACxBG,OAAO,CAACgB,OAAO,GAAGnB,MAAM;;MAExB;MACA,IAAID,UAAU,YAAY/C,IAAI,EAAE;QAC9BiD,OAAO,CAACI,GAAG,GAAGC,GAAG,CAACC,eAAe,CAACR,UAAU,CAAC;MAC/C,CAAC,MAAM;QACLE,OAAO,CAACI,GAAG,GAAGN,UAAU;MAC1B;IACF,CAAC,CAAC,OAAOjD,KAAK,EAAE;MACdkD,MAAM,CAAClD,KAAK,CAAC;IACf;EACF,CAAC,CAAC;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}